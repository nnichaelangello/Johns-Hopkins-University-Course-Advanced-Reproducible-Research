library(knitr)
library(dplyr)
library(ggplot2)
library(readr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
storm_data <- read_csv("StormData.csv.bz2")
storm_data <- read_csv("repdata_data_StormData.csv")
storm_data <- read_csv("repdata_data_StormData.csv.bz2")
storm_data <- read_csv("StormData.csv.bz2")
install.packages("knitr", repos = "https://cran.rstudio.com/")
install.packages("knitr", repos = "https://cran.rstudio.com/")
install.packages("dplyr", repos = "https://cran.rstudio.com/")
install.packages("readr", repos = "https://cran.rstudio.com/")
getwd()
library(knitr)
library(dplyr)
library(ggplot2)
library(readr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
# Membaca file CSV terkompresi
storm_data <- read_csv("StormData.csv.bz2", show_col_types = FALSE)
# Fungsi untuk mengonversi nilai kerusakan dengan eksponen
convert_damage <- function(value, exp) {
exp <- toupper(exp)  # Mengubah eksponen menjadi huruf besar
ifelse(exp == "K", value * 1000,       # Ribuan
ifelse(exp == "M", value * 1000000,  # Jutaan
ifelse(exp == "B", value * 1000000000, value)))  # Miliaran
}
# Membersihkan dan mentransformasi data
storm_clean <- storm_data %>%
mutate(
prop_dmg = convert_damage(PROPDMG, PROPDMGEXP),  # Konversi kerusakan properti
crop_dmg = convert_damage(CROPDMG, CROPDMGEXP),  # Konversi kerusakan tanaman
total_dmg = prop_dmg + crop_dmg  # Total kerusakan ekonomi
) %>%
select(EVTYPE, FATALITIES, INJURIES, total_dmg) %>%  # Memilih kolom yang relevan
filter(!is.na(EVTYPE))  # Menghapus baris dengan EVTYPE kosong
# Menghitung dampak kesehatan
health_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(
total_fatalities = sum(FATALITIES, na.rm = TRUE),
total_injuries = sum(INJURIES, na.rm = TRUE),
total_health_impact = total_fatalities + total_injuries
) %>%
arrange(desc(total_health_impact)) %>%  # Mengurutkan dari yang terbesar
top_n(10, total_health_impact)  # Memilih 10 teratas
# Membuat plot
ggplot(health_impact, aes(x = reorder(EVTYPE, total_health_impact), y = total_health_impact)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +  # Membalik sumbu untuk keterbacaan
labs(title = "Top 10 Weather Events by Health Impact",
x = "Event Type", y = "Total Fatalities + Injuries") +
theme_minimal()
setwd("C:/Users/Michael Angello/Documents/Michael/Portofolio/Data Science/Coursera - Data Science Foundations using R Specialization/Advanced Reproducible Research/")
library(knitr)
library(dplyr)
library(ggplot2)
library(readr)
knitr::opts_chunk$set(echo = TRUE)
# Membaca file CSV terkompresi
storm_data <- read_csv("StormData.csv.bz2", show_col_types = FALSE)
# Fungsi untuk mengonversi nilai kerusakan dengan eksponen
convert_damage <- function(value, exp) {
exp <- toupper(exp)  # Mengubah eksponen menjadi huruf besar
ifelse(exp == "K", value * 1000,       # Ribuan
ifelse(exp == "M", value * 1000000,  # Jutaan
ifelse(exp == "B", value * 1000000000, value)))  # Miliaran
}
# Membersihkan dan mentransformasi data
storm_clean <- storm_data %>%
mutate(
prop_dmg = convert_damage(PROPDMG, PROPDMGEXP),  # Konversi kerusakan properti
crop_dmg = convert_damage(CROPDMG, CROPDMGEXP),  # Konversi kerusakan tanaman
total_dmg = prop_dmg + crop_dmg  # Total kerusakan ekonomi
) %>%
select(EVTYPE, FATALITIES, INJURIES, total_dmg) %>%  # Memilih kolom yang relevan
filter(!is.na(EVTYPE))  # Menghapus baris dengan EVTYPE kosong
# Menghitung dampak kesehatan
health_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(
total_fatalities = sum(FATALITIES, na.rm = TRUE),
total_injuries = sum(INJURIES, na.rm = TRUE),
total_health_impact = total_fatalities + total_injuries
) %>%
arrange(desc(total_health_impact)) %>%  # Mengurutkan dari yang terbesar
top_n(10, total_health_impact)  # Memilih 10 teratas
# Membuat plot
ggplot(health_impact, aes(x = reorder(EVTYPE, total_health_impact), y = total_health_impact)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +  # Membalik sumbu untuk keterbacaan
labs(title = "Top 10 Weather Events by Health Impact",
x = "Event Type", y = "Total Fatalities + Injuries") +
theme_minimal()
library(knitr)
library(dplyr)
library(ggplot2)
library(readr)
knitr::opts_chunk$set(echo = TRUE)
# Membaca file CSV terkompresi
storm_data <- read_csv("StormData.csv.bz2", show_col_types = FALSE)
# Fungsi untuk mengonversi nilai kerusakan dengan eksponen
convert_damage <- function(value, exp) {
exp <- toupper(exp)  # Mengubah eksponen menjadi huruf besar
ifelse(exp == "K", value * 1000,       # Ribuan
ifelse(exp == "M", value * 1000000,  # Jutaan
ifelse(exp == "B", value * 1000000000, value)))  # Miliaran
}
# Membersihkan dan mentransformasi data
storm_clean <- storm_data %>%
mutate(
prop_dmg = convert_damage(PROPDMG, PROPDMGEXP),  # Konversi kerusakan properti
crop_dmg = convert_damage(CROPDMG, CROPDMGEXP),  # Konversi kerusakan tanaman
total_dmg = prop_dmg + crop_dmg  # Total kerusakan ekonomi
) %>%
select(EVTYPE, FATALITIES, INJURIES, total_dmg) %>%  # Memilih kolom yang relevan
filter(!is.na(EVTYPE))  # Menghapus baris dengan EVTYPE kosong
# Menghitung dampak kesehatan
health_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(
total_fatalities = sum(FATALITIES, na.rm = TRUE),
total_injuries = sum(INJURIES, na.rm = TRUE),
total_health_impact = total_fatalities + total_injuries
) %>%
arrange(desc(total_health_impact)) %>%  # Mengurutkan dari yang terbesar
top_n(10, total_health_impact)  # Memilih 10 teratas
# Membuat plot
ggplot(health_impact, aes(x = reorder(EVTYPE, total_health_impact), y = total_health_impact)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +  # Membalik sumbu untuk keterbacaan
labs(title = "Top 10 Weather Events by Health Impact",
x = "Event Type", y = "Total Fatalities + Injuries") +
theme_minimal()
library(knitr)
library(dplyr)
library(ggplot2)
library(readr)
# Tentukan lokasi cache baru
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, cache.path = "cache/")
dir.create("cache")
# Menghitung dampak kesehatan
health_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(
total_fatalities = sum(FATALITIES, na.rm = TRUE),
total_injuries = sum(INJURIES, na.rm = TRUE),
total_health_impact = total_fatalities + total_injuries
) %>%
arrange(desc(total_health_impact)) %>%
top_n(10, total_health_impact)
# Membuat plot
ggplot(health_impact, aes(x = reorder(EVTYPE, total_health_impact), y = total_health_impact)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top 10 Weather Events by Health Impact",
x = "Event Type", y = "Total Fatalities + Injuries") +
theme_minimal()
# Membaca file CSV terkompresi
storm_data <- read_csv("StormData.csv", show_col_types = FALSE)
# Fungsi untuk mengonversi nilai kerusakan dengan eksponen
convert_damage <- function(value, exp) {
exp <- toupper(exp)  # Mengubah eksponen menjadi huruf besar
ifelse(exp == "K", value * 1000,       # Ribuan
ifelse(exp == "M", value * 1000000,  # Jutaan
ifelse(exp == "B", value * 1000000000, value)))  # Miliaran
}
# Membersihkan dan mentransformasi data
storm_clean <- storm_data %>%
mutate(
prop_dmg = convert_damage(PROPDMG, PROPDMGEXP),  # Konversi kerusakan properti
crop_dmg = convert_damage(CROPDMG, CROPDMGEXP),  # Konversi kerusakan tanaman
total_dmg = prop_dmg + crop_dmg  # Total kerusakan ekonomi
) %>%
select(EVTYPE, FATALITIES, INJURIES, total_dmg) %>%  # Memilih kolom yang relevan
filter(!is.na(EVTYPE))  # Menghapus baris dengan EVTYPE kosong
# Menghitung dampak kesehatan
health_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(
total_fatalities = sum(FATALITIES, na.rm = TRUE),
total_injuries = sum(INJURIES, na.rm = TRUE),
total_health_impact = total_fatalities + total_injuries
) %>%
arrange(desc(total_health_impact)) %>%
top_n(10, total_health_impact)
# Membuat plot
ggplot(health_impact, aes(x = reorder(EVTYPE, total_health_impact), y = total_health_impact)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top 10 Weather Events by Health Impact",
x = "Event Type", y = "Total Fatalities + Injuries") +
theme_minimal()
# Membaca file CSV terkompresi
storm_data <- read_csv("StormData.csv.bz2", show_col_types = FALSE)
# Fungsi untuk mengonversi nilai kerusakan dengan eksponen
convert_damage <- function(value, exp) {
exp <- toupper(exp)  # Mengubah eksponen menjadi huruf besar
ifelse(exp == "K", value * 1000,       # Ribuan
ifelse(exp == "M", value * 1000000,  # Jutaan
ifelse(exp == "B", value * 1000000000, value)))  # Miliaran
}
# Membersihkan dan mentransformasi data
storm_clean <- storm_data %>%
mutate(
prop_dmg = convert_damage(PROPDMG, PROPDMGEXP),  # Konversi kerusakan properti
crop_dmg = convert_damage(CROPDMG, CROPDMGEXP),  # Konversi kerusakan tanaman
total_dmg = prop_dmg + crop_dmg  # Total kerusakan ekonomi
) %>%
select(EVTYPE, FATALITIES, INJURIES, total_dmg) %>%  # Memilih kolom yang relevan
filter(!is.na(EVTYPE))  # Menghapus baris dengan EVTYPE kosong
# Menghitung dampak kesehatan
health_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(
total_fatalities = sum(FATALITIES, na.rm = TRUE),
total_injuries = sum(INJURIES, na.rm = TRUE),
total_health_impact = total_fatalities + total_injuries
) %>%
arrange(desc(total_health_impact)) %>%
top_n(10, total_health_impact)
# Membuat plot
ggplot(health_impact, aes(x = reorder(EVTYPE, total_health_impact), y = total_health_impact)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top 10 Weather Events by Health Impact",
x = "Event Type", y = "Total Fatalities + Injuries") +
theme_minimal()
# Menghitung dampak kesehatan
health_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(
total_fatalities = sum(FATALITIES, na.rm = TRUE),
total_injuries = sum(INJURIES, na.rm = TRUE),
total_health_impact = total_fatalities + total_injuries
) %>%
arrange(desc(total_health_impact)) %>%
top_n(10, total_health_impact)
# Membuat plot
ggplot(health_impact, aes(x = reorder(EVTYPE, total_health_impact), y = total_health_impact)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top 10 Weather Events by Health Impact",
x = "Event Type", y = "Total Fatalities + Injuries") +
theme_minimal()
# Menghitung dampak ekonomi
econ_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(total_econ_dmg = sum(total_dmg, na.rm = TRUE)) %>%
arrange(desc(total_econ_dmg)) %>%
top_n(10, total_econ_dmg)
# Membuat plot
ggplot(econ_impact, aes(x = reorder(EVTYPE, total_econ_dmg), y = total_econ_dmg / 1e9)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Top 10 Weather Events by Economic Damage",
x = "Event Type", y = "Total Damage (Billions USD)") +
theme_minimal()
# Menggabungkan data kesehatan dan ekonomi
top_events <- merge(
head(health_impact, 5)[, c("EVTYPE", "total_health_impact")],
head(econ_impact, 5)[, c("EVTYPE", "total_econ_dmg")],
by = "EVTYPE", all = TRUE
)
# Menampilkan tabel
kable(top_events, caption = "Top 5 Events by Health and Economic Impact")
# Menampilkan tabel
kable(top_events, caption = "Top 5 Events by Health and Economic Impact")
top_events <- merge(
head(health_impact, 5)[, c("EVTYPE", "total_health_impact")],
head(econ_impact, 5)[, c("EVTYPE", "total_econ_dmg")],
by = "EVTYPE", all = TRUE
)
kable(top_events, caption = "Top 5 Events by Health and Economic Impact")
# Menggabungkan data kesehatan dan ekonomi
top_events <- merge(
head(health_impact, 5)[, c("EVTYPE", "total_health_impact")],
head(econ_impact, 5)[, c("EVTYPE", "total_econ_dmg")],
by = "EVTYPE", all = TRUE
)
# Menampilkan tabel
kable(top_events, caption = "Top 5 Events by Health and Economic Impact")
# Menggabungkan data kesehatan dan ekonomi
top_events <- merge(
head(health_impact, 5)[, c("EVTYPE", "total_health_impact")],
head(econ_impact, 5)[, c("EVTYPE", "total_econ_dmg")],
by = "EVTYPE", all = TRUE
)
# Menampilkan tabel
kable(top_events, caption = "Top 5 Events by Health and Economic Impact")
library(knitr)
library(dplyr)
library(ggplot2)
library(readr)
# Tentukan lokasi cache baru
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, cache.path = "cache/")
# Fungsi untuk mengonversi nilai kerusakan dengan eksponen
convert_damage <- function(value, exp) {
exp <- toupper(exp)  # Mengubah eksponen menjadi huruf besar
ifelse(exp == "K", value * 1000,       # Ribuan
ifelse(exp == "M", value * 1000000,  # Jutaan
ifelse(exp == "B", value * 1000000000, value)))  # Miliaran
}
# Membersihkan dan mentransformasi data
storm_clean <- storm_data %>%
mutate(
prop_dmg = convert_damage(PROPDMG, PROPDMGEXP),  # Konversi kerusakan properti
crop_dmg = convert_damage(CROPDMG, CROPDMGEXP),  # Konversi kerusakan tanaman
total_dmg = prop_dmg + crop_dmg  # Total kerusakan ekonomi
) %>%
select(EVTYPE, FATALITIES, INJURIES, total_dmg) %>%  # Memilih kolom yang relevan
filter(!is.na(EVTYPE))  # Menghapus baris dengan EVTYPE kosong
# Menghitung dampak kesehatan
health_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(
total_fatalities = sum(FATALITIES, na.rm = TRUE),
total_injuries = sum(INJURIES, na.rm = TRUE),
total_health_impact = total_fatalities + total_injuries
) %>%
arrange(desc(total_health_impact)) %>%
top_n(10, total_health_impact)
# Membuat plot
ggplot(health_impact, aes(x = reorder(EVTYPE, total_health_impact), y = total_health_impact)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top 10 Weather Events by Health Impact",
x = "Event Type", y = "Total Fatalities + Injuries") +
theme_minimal()
# Menghitung dampak ekonomi
econ_impact <- storm_clean %>%
group_by(EVTYPE) %>%
summarise(total_econ_dmg = sum(total_dmg, na.rm = TRUE)) %>%
arrange(desc(total_econ_dmg)) %>%
top_n(10, total_econ_dmg)
# Membuat plot
ggplot(econ_impact, aes(x = reorder(EVTYPE, total_econ_dmg), y = total_econ_dmg / 1e9)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Top 10 Weather Events by Economic Damage",
x = "Event Type", y = "Total Damage (Billions USD)") +
theme_minimal()
# Menggabungkan data kesehatan dan ekonomi
top_events <- merge(
head(health_impact, 5)[, c("EVTYPE", "total_health_impact")],
head(econ_impact, 5)[, c("EVTYPE", "total_econ_dmg")],
by = "EVTYPE", all = TRUE
)
# Menampilkan tabel
kable(top_events, caption = "Top 5 Events by Health and Economic Impact")
